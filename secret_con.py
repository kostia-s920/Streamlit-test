import streamlit as st
import pandas as pd
import psycopg2
from difflib import HtmlDiff
import re
import streamlit.components.v1 as components


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
def connect_to_db():
    try:
        connection = psycopg2.connect(
            host="localhost",
            database="competitor_content",
            user="kostia.s920",
            password="1502"
        )
        return connection
    except Exception as e:
        st.error(f"Error connecting to database: {e}")
        return None


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
def get_competitors(conn):
    query = "SELECT DISTINCT competitor_name FROM content_changes"
    return pd.read_sql(query, conn)['competitor_name'].tolist()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É URL –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
def get_pages_for_competitor(conn, competitor_name):
    query = f"SELECT DISTINCT url FROM {competitor_name}"
    return pd.read_sql(query, conn)['url'].tolist()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def get_dates_for_page(conn, competitor_name, page_url):
    query = f"""
        SELECT DISTINCT date_checked
        FROM {competitor_name}
        WHERE url = '{page_url}'
        ORDER BY date_checked ASC
    """
    return pd.read_sql(query, conn)['date_checked'].tolist()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
def get_page_data(conn, competitor_name, page_url, date):
    query = f"""
        SELECT title, h1, description, content, keywords_found, keywords_count
        FROM {competitor_name}
        WHERE url = '{page_url}' AND date_checked = '{date}'
    """
    return pd.read_sql(query, conn)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —É –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
def highlight_changes(old_value, new_value):
    diff = HtmlDiff()
    html_diff = diff.make_file(old_value.splitlines(), new_value.splitlines(), context=True)
    return html_diff


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ó—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
def extract_keywords(row):
    pattern = re.findall(r'([\w\s-]+?)\s*-\s*(\d+)\s*—Ä–∞–∑—ñ–≤', row)
    keywords_dict = {match[0].strip(): int(match[1]) for match in pattern}
    return keywords_dict


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è keywords_found
def compare_keywords(old_keywords, new_keywords):
    old_dict = extract_keywords(old_keywords)
    new_dict = extract_keywords(new_keywords)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ–¥–∞–Ω—ñ, –≤–∏–¥–∞–ª–µ–Ω—ñ —ñ –∑–º—ñ–Ω–µ–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    added = {k: new_dict[k] for k in new_dict if k not in old_dict}
    removed = {k: old_dict[k] for k in old_dict if k not in new_dict}
    changed = {k: (old_dict[k], new_dict[k]) for k in old_dict if k in new_dict and old_dict[k] != new_dict[k]}

    result = []
    for k, v in added.items():
        result.append((k, '–î–æ–¥–∞–Ω–æ', '-', f"{v} —Ä–∞–∑—ñ–≤", 'green'))
    for k, v in removed.items():
        result.append((k, '–í–∏–¥–∞–ª–µ–Ω–æ', f"{v} —Ä–∞–∑—ñ–≤", '-', 'red'))
    for k, (old_v, new_v) in changed.items():
        result.append((k, '–ó–º—ñ–Ω–µ–Ω–æ', f"{old_v} —Ä–∞–∑—ñ–≤", f"{new_v} —Ä–∞–∑—ñ–≤", 'yellow'))

    return pd.DataFrame(result, columns=['–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ', '–ó–º—ñ–Ω–∞', '–ë—É–ª–æ', '–°—Ç–∞–ª–æ', '–ö–æ–ª—ñ—Ä'])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
def show_color_legend():
    st.markdown(
        """
        **–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤:**
        - üü¢ **–î–æ–¥–∞–Ω–æ** ‚Äî –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ.
        - üî¥ **–í–∏–¥–∞–ª–µ–Ω–æ** ‚Äî –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.
        - üü° **–ó–º—ñ–Ω–µ–Ω–æ** ‚Äî –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–≥–∞–¥—É–≤–∞–Ω—å –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞.
        """
    )


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def main():
    st.title("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–º—ñ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤")

    conn = connect_to_db()

    if conn:
        # –í–∏–±—ñ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        competitors = get_competitors(conn)
        selected_competitor = st.selectbox('–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞', competitors)

        if selected_competitor:
            # –í–∏–±—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
            pages = get_pages_for_competitor(conn, selected_competitor)
            selected_page = st.selectbox('–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', pages)

            if selected_page:
                # –í–∏–±—ñ—Ä –¥–≤–æ—Ö –¥–∞—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                dates = get_dates_for_page(conn, selected_competitor, selected_page)
                selected_date1 = st.selectbox('–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –¥–∞—Ç—É', dates, key="date1")
                selected_date2 = st.selectbox('–í–∏–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É –¥–∞—Ç—É', dates, key="date2")

                if selected_date1 and selected_date2:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –¥–∞—Ç
                    data1 = get_page_data(conn, selected_competitor, selected_page, selected_date1)
                    data2 = get_page_data(conn, selected_competitor, selected_page, selected_date2)

                    if not data1.empty and not data2.empty:
                        st.write(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {selected_page} –º—ñ–∂ {selected_date1} —Ç–∞ {selected_date2}:")

                        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è Title, H1, Description
                        metadata_changes = []
                        for col in ['title', 'h1', 'description']:
                            if data1[col].values[0] != data2[col].values[0]:
                                metadata_changes.append({
                                    '–ü–æ–ª–µ': col,
                                    '–ë—É–ª–æ': data1[col].values[0],
                                    '–°—Ç–∞–ª–æ': data2[col].values[0]
                                })

                        if metadata_changes:
                            st.subheader("–ó–º—ñ–Ω–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö:")
                            metadata_df = pd.DataFrame(metadata_changes)
                            st.table(metadata_df)

                        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
                        st.subheader("–ó–º—ñ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ:")
                        content_diff = highlight_changes(data1['content'].values[0], data2['content'].values[0])
                        components.html(content_diff, height=400, scrolling=True)

                        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è keywords_found —É –≥–æ–ª–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó
                        if data1['keywords_found'].values[0] and data2['keywords_found'].values[0]:
                            keywords_comparison = compare_keywords(data1['keywords_found'].values[0],
                                                                   data2['keywords_found'].values[0])
                            if not keywords_comparison.empty:
                                st.subheader("–ó–º—ñ–Ω–∏ –≤ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö:")
                                st.table(keywords_comparison.style.applymap(lambda val: f'background-color: {val}',
                                                                            subset=['–ö–æ–ª—ñ—Ä']))

                        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è keywords_count
                        if data1['keywords_count'].values[0] != data2['keywords_count'].values[0]:
                            st.subheader("–ó–º—ñ–Ω–∏ –≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:")
                            st.table(pd.DataFrame({
                                '–ë—É–ª–æ': [data1['keywords_count'].values[0]],
                                '–°—Ç–∞–ª–æ': [data2['keywords_count'].values[0]]
                            }))

                        # –ü–æ–∫–∞–∑—É—î–º–æ –ª–µ–≥–µ–Ω–¥—É
                        show_color_legend()

                    else:
                        st.write("–î–ª—è –æ–±—Ä–∞–Ω–∏—Ö –¥–∞—Ç –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.")

    conn.close()


if __name__ == "__main__":
    main()